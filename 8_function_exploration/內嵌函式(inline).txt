一般函式:
以機器語言下去思考:
    當程式遇到函式呼叫的指令，程式先將函數呼叫之下一個指令的記憶體位址儲存起來，拷貝函數引述至stack上
    然後跳到函數開始的記憶體位址，執行函數程式碼。   執行完函式後回到先前儲存位址的指令。
    
內嵌函式:(inline)
    以機器語言下去思考:
        把函式 直接 "編譯"成多個指令，並"嵌入"至程式的其他程式碼中，所以需要花費較多的記憶體，但執行效率快。

------------------------------------------------------------------------------------------------------
具有reference引數的函式其目的是修改以引數傳入的變數，則產生暫時變數的情況會無法達成目的。
所以看到有關"暫時變數的警告"(不只是錯誤)，請不要忽略它。


有三點原因盡量將reference引數宣告為常數資料的reference
1.避免資料的意外改變  (或用call by value)
2.使用const可使函數處理 const和非const的實際引數；若函數原型無const則只能接受非-const資料  (阿就全都要阿)
                                                若函數原型有const就都能接受 const 與 非-const 資料
3.使用const的reference可以使函數正確地產生並使用"暫時變數"


注意: reference 本來就是設計給 struct 或者 物件導向所使用的  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


就像指標有 **ptr
當然有 &&ref